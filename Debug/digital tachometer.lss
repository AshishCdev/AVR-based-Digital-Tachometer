
digital techometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000003b6  0000044a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800088  00800088  00000472  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000004a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ff  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000041a  00000000  00000000  00000e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000404  00000000  00000000  00001273  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b4  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005cb  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_18>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 00 	call	0xce	; 0xce <main>
  8a:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_puti>:
  }

}

void lcd_puti(int value)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2a 97       	sbiw	r28, 0x0a	; 10
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	char buff[10];
	itoa(value,buff,10);
  a6:	4a e0       	ldi	r20, 0x0A	; 10
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	be 01       	movw	r22, r28
  ac:	6f 5f       	subi	r22, 0xFF	; 255
  ae:	7f 4f       	sbci	r23, 0xFF	; 255
  b0:	0e 94 99 01 	call	0x332	; 0x332 <itoa>
	lcd_puts(buff);
  b4:	ce 01       	movw	r24, r28
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
}
  bc:	2a 96       	adiw	r28, 0x0a	; 10
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <main>:
void lcd_puti(int value);

int main(void)
{
    uint16_t RPM;
	lcd_init(LCD_DISP_ON);
  ce:	8c e0       	ldi	r24, 0x0C	; 12
  d0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_init>
	lcd_clrscr();
  d4:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clrscr>
	lcd_puts("    welcome");
  d8:	80 e6       	ldi	r24, 0x60	; 96
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f e9       	ldi	r18, 0x9F	; 159
  e2:	36 e8       	ldi	r19, 0x86	; 134
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	30 40       	sbci	r19, 0x00	; 0
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x18>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x22>
  f0:	00 00       	nop
	_delay_ms(500);
	
	 
	MCUCSR=(1<<6);
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	84 bf       	out	0x34, r24	; 52
	GICR=(1<<5);
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	8b bf       	out	0x3b, r24	; 59
	lcd_gotoxy(0,1);
	if(count==0) lcd_puts("NO ROTATION");
    else
	{
		
		RPM=count*60UL;
  fa:	cc e3       	ldi	r28, 0x3C	; 60
	GICR=(1<<5);
	
	
  while(1)
  {	
	sei();
  fc:	78 94       	sei
  fe:	9f e3       	ldi	r25, 0x3F	; 63
 100:	2d e0       	ldi	r18, 0x0D	; 13
 102:	33 e0       	ldi	r19, 0x03	; 3
 104:	91 50       	subi	r25, 0x01	; 1
 106:	20 40       	sbci	r18, 0x00	; 0
 108:	30 40       	sbci	r19, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x36>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x40>
 10e:	00 00       	nop
    _delay_ms(1000);
	cli();
 110:	f8 94       	cli
	lcd_clrscr();
 112:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clrscr>
	lcd_puts("ROTATION IN RPM");
 116:	8c e6       	ldi	r24, 0x6C	; 108
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
	lcd_gotoxy(0,1);
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_gotoxy>
	if(count==0) lcd_puts("NO ROTATION");
 126:	80 91 88 00 	lds	r24, 0x0088
 12a:	90 91 89 00 	lds	r25, 0x0089
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	29 f4       	brne	.+10     	; 0x13c <main+0x6e>
 132:	8c e7       	ldi	r24, 0x7C	; 124
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 51 01 	call	0x2a2	; 0x2a2 <lcd_puts>
 13a:	08 c0       	rjmp	.+16     	; 0x14c <main+0x7e>
    else
	{
		
		RPM=count*60UL;
		lcd_puti(RPM);
 13c:	9c 01       	movw	r18, r24
 13e:	c2 9f       	mul	r28, r18
 140:	c0 01       	movw	r24, r0
 142:	c3 9f       	mul	r28, r19
 144:	90 0d       	add	r25, r0
 146:	11 24       	eor	r1, r1
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_puti>
	}	
	count=0;
 14c:	10 92 89 00 	sts	0x0089, r1
 150:	10 92 88 00 	sts	0x0088, r1
  }
 154:	d3 cf       	rjmp	.-90     	; 0xfc <main+0x2e>

00000156 <__vector_18>:
	itoa(value,buff,10);
	lcd_puts(buff);
}

ISR(INT2_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
	++count;
 164:	80 91 88 00 	lds	r24, 0x0088
 168:	90 91 89 00 	lds	r25, 0x0089
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 89 00 	sts	0x0089, r25
 172:	80 93 88 00 	sts	0x0088, r24
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 184:	aa 9a       	sbi	0x15, 2	; 21
    lcd_e_delay();
 186:	00 c0       	rjmp	.+0      	; 0x188 <toggle_e+0x4>
    lcd_e_low();
 188:	aa 98       	cbi	0x15, 2	; 21
 18a:	08 95       	ret

0000018c <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 18c:	cf 93       	push	r28
 18e:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 190:	66 23       	and	r22, r22
 192:	11 f0       	breq	.+4      	; 0x198 <lcd_write+0xc>
       lcd_rs_high();
 194:	a8 9a       	sbi	0x15, 0	; 21
 196:	01 c0       	rjmp	.+2      	; 0x19a <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 198:	a8 98       	cbi	0x15, 0	; 21
    }
    lcd_rw_low();
 19a:	a9 98       	cbi	0x15, 1	; 21
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 19c:	a3 9a       	sbi	0x14, 3	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 19e:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1a0:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1a2:	a6 9a       	sbi	0x14, 6	; 20
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 1a4:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 1a6:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 1a8:	ac 98       	cbi	0x15, 4	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 1aa:	ab 98       	cbi	0x15, 3	; 21
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 1ac:	cc 23       	and	r28, r28
 1ae:	0c f4       	brge	.+2      	; 0x1b2 <lcd_write+0x26>
 1b0:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1b2:	c6 fd       	sbrc	r28, 6
 1b4:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1b6:	c5 fd       	sbrc	r28, 5
 1b8:	ac 9a       	sbi	0x15, 4	; 21
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 1ba:	c4 fd       	sbrc	r28, 4
 1bc:	ab 9a       	sbi	0x15, 3	; 21
        lcd_e_toggle();
 1be:	0e 94 c2 00 	call	0x184	; 0x184 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 1c2:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 1c4:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 1c6:	ac 98       	cbi	0x15, 4	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 1c8:	ab 98       	cbi	0x15, 3	; 21
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 1ca:	c3 fd       	sbrc	r28, 3
 1cc:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1ce:	c2 fd       	sbrc	r28, 2
 1d0:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1d2:	c1 fd       	sbrc	r28, 1
 1d4:	ac 9a       	sbi	0x15, 4	; 21
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 1d6:	c0 fd       	sbrc	r28, 0
 1d8:	ab 9a       	sbi	0x15, 3	; 21
        lcd_e_toggle();        
 1da:	0e 94 c2 00 	call	0x184	; 0x184 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 1de:	ab 9a       	sbi	0x15, 3	; 21
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1e0:	ac 9a       	sbi	0x15, 4	; 21
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1e2:	ad 9a       	sbi	0x15, 5	; 21
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 1e4:	ae 9a       	sbi	0x15, 6	; 21
    }
}
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 1ea:	88 23       	and	r24, r24
 1ec:	11 f0       	breq	.+4      	; 0x1f2 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 1ee:	a8 9a       	sbi	0x15, 0	; 21
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 1f2:	a8 98       	cbi	0x15, 0	; 21
    lcd_rw_high();                           /* RW=1  read mode      */
 1f4:	a9 9a       	sbi	0x15, 1	; 21
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 1f6:	a3 98       	cbi	0x14, 3	; 20
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 1f8:	a4 98       	cbi	0x14, 4	; 20
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 1fa:	a5 98       	cbi	0x14, 5	; 20
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 1fc:	a6 98       	cbi	0x14, 6	; 20
                
        /* read high nibble first */
        lcd_e_high();
 1fe:	aa 9a       	sbi	0x15, 2	; 21
        lcd_e_delay();        
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 202:	9b 99       	sbic	0x13, 3	; 19
 204:	02 c0       	rjmp	.+4      	; 0x20a <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	01 c0       	rjmp	.+2      	; 0x20c <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 20a:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 20c:	9c 99       	sbic	0x13, 4	; 19
 20e:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 210:	9d 99       	sbic	0x13, 5	; 19
 212:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 214:	9e 99       	sbic	0x13, 6	; 19
 216:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 218:	aa 98       	cbi	0x15, 2	; 21

        lcd_e_delay();                       /* Enable 500ns low       */
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 21c:	aa 9a       	sbi	0x15, 2	; 21
        lcd_e_delay();
 21e:	00 c0       	rjmp	.+0      	; 0x220 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 220:	9b 99       	sbic	0x13, 3	; 19
 222:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 224:	9c 99       	sbic	0x13, 4	; 19
 226:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 228:	9d 99       	sbic	0x13, 5	; 19
 22a:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 22c:	9e 99       	sbic	0x13, 6	; 19
 22e:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 230:	aa 98       	cbi	0x15, 2	; 21
    }
    return data;
}
 232:	08 95       	ret

00000234 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_read>
 23a:	88 23       	and	r24, r24
 23c:	dc f3       	brlt	.-10     	; 0x234 <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_read>
    
}/* lcd_waitbusy */
 246:	08 95       	ret

00000248 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 248:	cf 93       	push	r28
 24a:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 24c:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_waitbusy>
    lcd_write(cmd,0);
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	8c 2f       	mov	r24, r28
 254:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_write>
}
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 25c:	61 11       	cpse	r22, r1
 25e:	04 c0       	rjmp	.+8      	; 0x268 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 260:	80 58       	subi	r24, 0x80	; 128
 262:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
 266:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 268:	80 54       	subi	r24, 0x40	; 64
 26a:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
 26e:	08 95       	ret

00000270 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
 276:	08 95       	ret

00000278 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 278:	cf 93       	push	r28
 27a:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 27c:	0e 94 1a 01 	call	0x234	; 0x234 <lcd_waitbusy>
    if (c=='\n')
 280:	ca 30       	cpi	r28, 0x0A	; 10
 282:	49 f4       	brne	.+18     	; 0x296 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 284:	80 34       	cpi	r24, 0x40	; 64
 286:	10 f4       	brcc	.+4      	; 0x28c <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 288:	80 e4       	ldi	r24, 0x40	; 64
 28a:	01 c0       	rjmp	.+2      	; 0x28e <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 28c:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 28e:	80 58       	subi	r24, 0x80	; 128
 290:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
 294:	04 c0       	rjmp	.+8      	; 0x29e <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	8c 2f       	mov	r24, r28
 29a:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_write>
    }

}/* lcd_putc */
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 2a6:	ec 01       	movw	r28, r24
 2a8:	21 96       	adiw	r28, 0x01	; 1
 2aa:	fc 01       	movw	r30, r24
 2ac:	80 81       	ld	r24, Z
 2ae:	88 23       	and	r24, r24
 2b0:	29 f0       	breq	.+10     	; 0x2bc <lcd_puts+0x1a>
        lcd_putc(c);
 2b2:	0e 94 3c 01 	call	0x278	; 0x278 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 2b6:	89 91       	ld	r24, Y+
 2b8:	81 11       	cpse	r24, r1
 2ba:	fb cf       	rjmp	.-10     	; 0x2b2 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 2c2:	cf 93       	push	r28
 2c4:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 2c6:	a0 9a       	sbi	0x14, 0	; 20
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 2c8:	a1 9a       	sbi	0x14, 1	; 20
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 2ca:	a2 9a       	sbi	0x14, 2	; 20
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 2cc:	a3 9a       	sbi	0x14, 3	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 2ce:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2d0:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2d2:	a6 9a       	sbi	0x14, 6	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2d4:	e0 ea       	ldi	r30, 0xA0	; 160
 2d6:	ff e0       	ldi	r31, 0x0F	; 15
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 2dc:	ac 9a       	sbi	0x15, 4	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 2de:	ab 9a       	sbi	0x15, 3	; 21
    lcd_e_toggle();
 2e0:	0e 94 c2 00 	call	0x184	; 0x184 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2e4:	e0 ee       	ldi	r30, 0xE0	; 224
 2e6:	f4 e0       	ldi	r31, 0x04	; 4
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_init+0x26>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 2ec:	0e 94 c2 00 	call	0x184	; 0x184 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2f0:	e0 e1       	ldi	r30, 0x10	; 16
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd_init+0x32>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 2f8:	0e 94 c2 00 	call	0x184	; 0x184 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2fc:	e0 e1       	ldi	r30, 0x10	; 16
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <lcd_init+0x3e>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 304:	ab 98       	cbi	0x15, 3	; 21
    lcd_e_toggle();
 306:	0e 94 c2 00 	call	0x184	; 0x184 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 30a:	e0 e1       	ldi	r30, 0x10	; 16
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 312:	88 e2       	ldi	r24, 0x28	; 40
 314:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 318:	88 e0       	ldi	r24, 0x08	; 8
 31a:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 31e:	0e 94 38 01 	call	0x270	; 0x270 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 328:	8c 2f       	mov	r24, r28
 32a:	0e 94 24 01 	call	0x248	; 0x248 <lcd_command>

}/* lcd_init */
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <itoa>:
 332:	45 32       	cpi	r20, 0x25	; 37
 334:	51 05       	cpc	r21, r1
 336:	20 f4       	brcc	.+8      	; 0x340 <itoa+0xe>
 338:	42 30       	cpi	r20, 0x02	; 2
 33a:	10 f0       	brcs	.+4      	; 0x340 <itoa+0xe>
 33c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__itoa_ncheck>
 340:	fb 01       	movw	r30, r22
 342:	10 82       	st	Z, r1
 344:	cb 01       	movw	r24, r22
 346:	08 95       	ret

00000348 <__itoa_ncheck>:
 348:	bb 27       	eor	r27, r27
 34a:	4a 30       	cpi	r20, 0x0A	; 10
 34c:	31 f4       	brne	.+12     	; 0x35a <__itoa_ncheck+0x12>
 34e:	99 23       	and	r25, r25
 350:	22 f4       	brpl	.+8      	; 0x35a <__itoa_ncheck+0x12>
 352:	bd e2       	ldi	r27, 0x2D	; 45
 354:	90 95       	com	r25
 356:	81 95       	neg	r24
 358:	9f 4f       	sbci	r25, 0xFF	; 255
 35a:	0c 94 b0 01 	jmp	0x360	; 0x360 <__utoa_common>

0000035e <__utoa_ncheck>:
 35e:	bb 27       	eor	r27, r27

00000360 <__utoa_common>:
 360:	fb 01       	movw	r30, r22
 362:	55 27       	eor	r21, r21
 364:	aa 27       	eor	r26, r26
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	aa 1f       	adc	r26, r26
 36c:	a4 17       	cp	r26, r20
 36e:	10 f0       	brcs	.+4      	; 0x374 <__utoa_common+0x14>
 370:	a4 1b       	sub	r26, r20
 372:	83 95       	inc	r24
 374:	50 51       	subi	r21, 0x10	; 16
 376:	b9 f7       	brne	.-18     	; 0x366 <__utoa_common+0x6>
 378:	a0 5d       	subi	r26, 0xD0	; 208
 37a:	aa 33       	cpi	r26, 0x3A	; 58
 37c:	08 f0       	brcs	.+2      	; 0x380 <__utoa_common+0x20>
 37e:	a9 5d       	subi	r26, 0xD9	; 217
 380:	a1 93       	st	Z+, r26
 382:	00 97       	sbiw	r24, 0x00	; 0
 384:	79 f7       	brne	.-34     	; 0x364 <__utoa_common+0x4>
 386:	b1 11       	cpse	r27, r1
 388:	b1 93       	st	Z+, r27
 38a:	11 92       	st	Z+, r1
 38c:	cb 01       	movw	r24, r22
 38e:	0c 94 c9 01 	jmp	0x392	; 0x392 <strrev>

00000392 <strrev>:
 392:	dc 01       	movw	r26, r24
 394:	fc 01       	movw	r30, r24
 396:	67 2f       	mov	r22, r23
 398:	71 91       	ld	r23, Z+
 39a:	77 23       	and	r23, r23
 39c:	e1 f7       	brne	.-8      	; 0x396 <strrev+0x4>
 39e:	32 97       	sbiw	r30, 0x02	; 2
 3a0:	04 c0       	rjmp	.+8      	; 0x3aa <strrev+0x18>
 3a2:	7c 91       	ld	r23, X
 3a4:	6d 93       	st	X+, r22
 3a6:	70 83       	st	Z, r23
 3a8:	62 91       	ld	r22, -Z
 3aa:	ae 17       	cp	r26, r30
 3ac:	bf 07       	cpc	r27, r31
 3ae:	c8 f3       	brcs	.-14     	; 0x3a2 <strrev+0x10>
 3b0:	08 95       	ret

000003b2 <_exit>:
 3b2:	f8 94       	cli

000003b4 <__stop_program>:
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <__stop_program>
